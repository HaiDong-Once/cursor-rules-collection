---
description: 
globs: 
alwaysApply: false
---
# 代码风格规则 (002)

## 规则概述

本规则定义了跨语言通用的代码风格指南，旨在提高代码可读性、一致性和可维护性。

## 命名约定

### 1.1 通用命名原则

- 名称应当清晰表达其用途和意图
- 避免使用缩写，除非是广泛接受的（如 ID, HTML, URL）
- 避免使用单字母变量名，除非作为循环索引或临时变量

### 1.2 特定语言命名规范

| 语言 | 变量/属性 | 函数/方法 | 类/接口 | 常量 |
|------|-----------|-----------|---------|------|
| JavaScript | camelCase | camelCase | PascalCase | UPPER_SNAKE_CASE |
| Python | snake_case | snake_case | PascalCase | UPPER_SNAKE_CASE |
| Java | camelCase | camelCase | PascalCase | UPPER_SNAKE_CASE |
| C# | camelCase | PascalCase | PascalCase | PascalCase |

## 格式化

### 2.1 缩进

- 使用空格而非制表符（Tab）
- 缩进宽度为2或4个空格（项目内保持一致）

### 2.2 行长度

- 每行代码不超过80-100个字符
- 较长的语句应当在逗号或操作符后换行

### 2.3 空行

- 使用空行分隔逻辑相关的代码块
- 类/函数定义之间使用1-2个空行
- 相关的导入语句之间不需要空行

## 注释

### 3.1 注释语法

- 使用语言标准的注释语法
- 所有多行注释都应以语言的多行注释标记开始

### 3.2 注释内容

- 注释应解释"为什么"，而不是"做了什么"
- 复杂算法或非直观逻辑需要详细注释
- 使用TODO、FIXME等标准标记注释未完成的工作

## 语言特定规则

[更多详细的特定语言规则可以参考其他规则：]

## 代码检查工具

推荐使用以下工具确保代码风格一致性：

- ESLint (JavaScript)
- Prettier (多语言格式化)
- black (Python)
- checkstyle (Java)

## 异常与例外

在某些特定情况下，可以偏离这些规则：

1. 维护旧项目时，应遵循项目已有风格
2. 使用特定框架时，应遵循框架推荐风格
3. 针对性能优化的关键代码可适当降低可读性要求
