---
description: 
globs: 
alwaysApply: false
---
# CSS最佳实践规范 (302)

## 规则概述

本规范定义了CSS的编码规范和最佳实践，旨在提高样式代码的可读性、可维护性和性能。

## 基本规范

### 1.1 代码格式

- 缩进使用2个空格（一个tab）
- 每个属性声明末尾都要加分号
- 选择器和声明块之间使用一个空格
- 每个属性单独一行

```css
/* 推荐 */
.selector {
  property1: value1;
  property2: value2;
}

/* 不推荐 */
.selector{property1:value1;property2:value2;}
```

### 1.2 命名规范

- 类名使用有意义的命名，反映元素用途而非外观
- 使用连字符（-）作为类名中单词的分隔符
- 避免使用下划线（_）和驼峰式命名
- ID和类名小写

```css
/* 推荐 */
.nav-item {
  margin-right: 10px;
}

/* 不推荐 */
.navItem {
  margin-right: 10px;
}

/* 不推荐 - 基于表现而非用途 */
.blue-button {
  background-color: blue;
}

/* 推荐 - 基于用途 */
.btn-primary {
  background-color: blue;
}
```

## 选择器规范

### 2.1 选择器性能

- 避免使用通配符选择器（*）
- 避免使用标签名作为选择器
- 使用直接子选择器优化性能
- 选择器嵌套层级不超过3层

```css
/* 不推荐 - 标签选择器 */
div a span {
  color: red;
}

/* 推荐 - 使用类选择器 */
.menu .menu-link .icon {
  color: red;
}

/* 更好 - 使用直接子选择器减少层级 */
.menu > .menu-link > .icon {
  color: red;
}

/* 最佳 - 扁平化选择器 */
.menu-icon {
  color: red;
}
```

### 2.2 避免使用ID选择器

- 尽量使用类选择器，避免使用ID选择器（高特异性会导致样式难以覆盖）

```css
/* 不推荐 */
#header {
  padding: 20px;
}

/* 推荐 */
.header {
  padding: 20px;
}
```

## 属性规范

### 3.1 属性顺序

按照特定的顺序组织属性，提高代码可读性：

1. 布局属性（position, display, float 等）
2. 盒模型属性（width, height, margin, padding 等）
3. 视觉属性（background, border, box-shadow 等）
4. 文字排版（color, font, text-align, text-transform 等）
5. 其他属性

```css
.element {
  /* 布局属性 */
  position: absolute;
  display: block;
  float: left;
  
  /* 盒模型属性 */
  width: 100px;
  height: 100px;
  margin: 10px;
  padding: 10px;
  
  /* 视觉属性 */
  background: #f5f5f5;
  border: 1px solid #e5e5e5;
  border-radius: 3px;
  
  /* 文字排版 */
  color: #333;
  font-size: 16px;
  text-align: center;
  
  /* 其他 */
  cursor: pointer;
}
```

### 3.2 简写属性

- 尽量使用简写属性
- 省略值为0的单位
- 十六进制值使用小写字母，尽可能使用简写

```css
/* 不推荐 */
.element {
  margin-top: 0px;
  margin-right: 10px;
  margin-bottom: 20px;
  margin-left: 10px;
  background-color: #FFFFFF;
}

/* 推荐 */
.element {
  margin: 0 10px 20px;
  background-color: #fff;
}
```

## 组织规范

### 4.1 模块化CSS

- 采用模块化方式组织CSS，每个组件维护自己的样式
- 使用BEM命名约定（Block-Element-Modifier）提高可读性和可维护性

```css
/* Block组件 */
.card {
  background: #fff;
  border-radius: 2px;
}

/* Element子元素 */
.card__title {
  font-size: 18px;
  font-weight: bold;
}

.card__content {
  padding: 20px;
}

/* Modifier修饰符 */
.card--featured {
  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
}
```

### 4.2 样式文件组织

- 按照功能或组件对CSS文件进行分组
- 创建基础样式、通用组件、特定页面样式等分类

```
styles/
├── base/
│   ├── reset.css
│   ├── typography.css
│   └── variables.css
├── components/
│   ├── buttons.css
│   ├── forms.css
│   └── navigation.css
├── layout/
│   ├── header.css
│   ├── footer.css
│   └── grid.css
└── pages/
    ├── home.css
    └── about.css
```

## 响应式设计

### 5.1 媒体查询

- 使用移动优先的方法，先为移动设备设计样式，再使用媒体查询适配更大的屏幕
- 在CSS文件底部添加媒体查询，或者放入单独的文件

```css
/* 基础样式（移动设备优先） */
.container {
  padding: 15px;
}

/* 平板设备 */
@media (min-width: 768px) {
  .container {
    padding: 20px;
  }
}

/* 桌面设备 */
@media (min-width: 1024px) {
  .container {
    padding: 30px;
    max-width: 1200px;
    margin: 0 auto;
  }
}
```

### 5.2 使用相对单位

- 优先使用相对单位（如em, rem, vw, vh）而非像素值
- 使用百分比设置宽度，使布局更灵活

```css
/* 不推荐 */
.text {
  font-size: 16px;
  line-height: 24px;
  margin-bottom: 24px;
}

/* 推荐 */
.text {
  font-size: 1rem;
  line-height: 1.5;
  margin-bottom: 1.5rem;
}
```

## 注释规范

### 6.1 区块注释

- 使用区块注释标记主要区块

```css
/* ==========================================================================
   头部区域样式
   ========================================================================== */

.header {
  background-color: #fff;
  border-bottom: 1px solid #eee;
}

/* 导航菜单 */
.header-nav {
  display: flex;
}
```

### 6.2 单行注释

- 在复杂样式属性前使用单行注释说明

```css
.element {
  /* 使用固定宽度确保在各种屏幕上一致的表现 */
  width: 280px;
  
  /* 使用负边距配合绝对定位创建悬浮效果 */
  margin-top: -20px;
}
```

## 性能优化

### 7.1 避免重绘和重排

- 尽量修改会触发重排的CSS属性
- 使用transform和opacity进行动画，而非改变布局属性

```css
/* 不推荐 - 触发重排 */
.element {
  animation: move 1s ease;
}
@keyframes move {
  from { top: 0; left: 0; }
  to { top: 100px; left: 100px; }
}

/* 推荐 - 只触发重绘，性能更好 */
.element {
  animation: move 1s ease;
}
@keyframes move {
  from { transform: translate(0, 0); }
  to { transform: translate(100px, 100px); }
}
```

### 7.2 选择器性能优化

- 避免使用通配符和属性选择器
- 减少选择器的层级和复杂度

```css
/* 不推荐 - 性能差 */
[type="text"] {
  border: 1px solid #ccc;
}

/* 推荐 - 性能更好 */
.input-text {
  border: 1px solid #ccc;
}
```

## 预处理器使用

### 8.1 LESS/SASS规范

- 将公共样式抽离为变量和混合
- 避免嵌套层级超过3层
- 按逻辑组织嵌套结构

```less
// 变量定义
@primary-color: #3498db;
@spacing-unit: 10px;

// 混合定义
.box-shadow(@shadow) {
  -webkit-box-shadow: @shadow;
  -moz-box-shadow: @shadow;
  box-shadow: @shadow;
}

// 组件样式
.card {
  background: white;
  margin-bottom: @spacing-unit * 2;
  .box-shadow(0 2px 5px rgba(0, 0, 0, 0.1));
  
  // 元素
  &__header {
    border-bottom: 1px solid #eee;
    padding: @spacing-unit;
    
    // 避免嵌套过深
    h2 {
      color: @primary-color;
    }
  }
  
  &__content {
    padding: @spacing-unit;
  }
}
```


